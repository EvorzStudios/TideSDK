#!/usr/bin/env python

# 
# Copyright (c) 2012 - 2014 TideSDK contributors 
# http://www.tidesdk.org
# Includes modified sources under the Apache 2 License
# Copyright (c) 2008 - 2012 Appcelerator Inc
# Refer to LICENSE for details of distribution and use.
# 

import effess
import os
import sys
import inspect
import urllib
import tarfile
import os.path as path
import distutils.dir_util as dirutil
from progressbar import ProgressBar
Import('build')

revisions = {
    "linux-x86": 2,
    "linux-x86_64": 2,
    "osx-x86": 2,
    "win32-x86": 2
}

arch_name = '%s-%s-v%s' % (build.os, build.arch, revisions[build.os+'-'+build.arch])
if build.is_win32():
    arch_name = '%s-%s-v%s' % ("win", build.arch, revisions[build.os+'-'+build.arch])
thirdparty_name = 'thirdparty-%s' % (arch_name)

url = 'http://tidesdk.multipart.net/thirdparty/tide-%s.tgz' % (arch_name)

build.third_party = path.join(build.cwd(), thirdparty_name)
rtdir = build.runtime_build_dir

def exists():
    return path.isdir(build.third_party)

def fetch():
    print "You don't seem to have the appropriate thirdparty files. I'll fetch them."
    print "Downloading %s" % url

    pbar = ProgressBar().start()
    try:
        def progress_callback(count, block_size, total_size):
            if (total_size < 0):
                raise Exception("Could not fetch archive! Does it exist on the server?")
            percent = int(count * block_size * 100/total_size)
            pbar.update(percent)

        fname, msg = urllib.urlretrieve(url, reporthook=progress_callback)

        print "Fetched it (%s). I'm going to unpack it now..." % (fname)
        os.makedirs(build.third_party)
        tfile = tarfile.open(fname, mode="r:gz")
        tfile.extractall(path=build.third_party)
    finally:
        urllib.urlcleanup()
        pbar.finish()

if not exists(): fetch()

if build.is_linux():
    libs = [ 'poco', 'webkit', 'libproxy', 'libsoup']
    for libdir in libs:
        effess.copy_tree(path.join(build.third_party, libdir, 'lib'), rtdir)

elif build.is_win32():
    libs = ['boost', 'libproxy', 'poco', 'webkit', 'curl', 'cairo']
    if build.tidelite is False:
        libs.append('webkit-patch')
    else:
        libs.append('webkit-lite')
    for libdir in libs:
        effess.copy_tree(path.join(build.third_party, libdir, 'bin'), rtdir)
    effess.copy_tree(path.join(build.third_party, 'sdk'), path.join(build.dir, 'sdk'))

elif build.is_osx():
    libs = ['boost', 'curl', 'openssl', 'poco']
    excludes = ['.a', '.h', '.defs', 'JavaScriptGlue.framework', '.DS_Store']
    targets = []
    
    if build.tidelite:
        excludes.extend(['WebKit.framework', 'WebCore.framework', 'JavaScriptCore.framework'])    
    for framework in Glob(path.join(build.third_party, '*/*.framework')):
        t = build.utils.CopyToDir(framework, rtdir, exclude=excludes)
        targets.append(t)
    for libdir in libs:
        p = path.join(build.third_party, libdir, 'lib')
        targets.append(build.utils.CopyTree(p, rtdir, exclude=excludes))
        build.mark_build_target(targets)
    
    # PHP dependencies don't aren't distributed with the runtime, only Poco's.
    # for libdir in Glob(path.join(build.third_party, '*/lib')):

