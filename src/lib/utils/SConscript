#!/usr/bin/env python

# 
# Copyright (c) 2012 - 2014 TideSDK contributors 
# http://www.tidesdk.org
# Refer to LICENSE for details of distribution and use.
# 

import os
import os.path as path
import effess
Import('build')
Import('LIBUTILS_NAME')

# Get a separate copy of the Tide Utils for a particular build piece
# Give: A unique directory for that build piece where the utils should be copied
def get_tide_utils(dir):
    effess.copy_to_dir(build.tide_utils_dir, dir)
    sources = Glob('%s/utils/*.cpp' % dir) + \
        Glob('%s/utils/poco/*.cpp' % dir) + \
        Glob('%s/utils/%s/*.cpp' % (dir, build.os))
    if build.is_win32():
        sources.extend(Glob('%s/utils/unzip/*.cpp' % dir))
        sources.extend(Glob('%s/utils/win/*.cpp' % dir))
    if build.is_osx():
       sources.extend(Glob('%s/utils/%s/*.mm' % (dir, build.os)))
    if build.is_osx() or build.is_linux():
       sources.extend(Glob('%s/utils/posix/*.cpp' % dir))
    return sources


libutils_sources = []
libutils_env = build.env.Clone()
libutils_name = LIBUTILS_NAME

sources = libutils_sources + \
    Glob('*.cpp') + \
    Glob('poco/*.cpp')

if build.is_linux():
    sources += Glob('linux/*.cpp')

if build.is_win32():
    sources += Glob('unzip/*.cpp') + Glob('win/*.cpp')
else:
    sources += Glob('posix/*.cpp')

if build.is_osx():
    sources +=  Glob('osx/*.mm')

env = libutils_env
env.Append(CPPDEFINES=[('TIDE_UTILS_API_EXPORT', 1)])
build.add_thirdparty(env, 'boost')

if build.is_win32():
    env.Append(CCFLAGS=['/DUNICODE', '/D_UNICODE'])
    env.Append(LINKFLAGS=['/LTCG', '/INCREMENTAL:NO'])

if build.is_osx():
    env.Append(LINKFLAGS='-install_name lib' + libutils_name + '.dylib')
    env.Append(FRAMEWORKS=['Cocoa', 'SystemConfiguration', 'CoreServices'])

build.mark_build_target(env.Library(path.join(build.dir, 'objs', libutils_name), source=sources))

env1 = env.Clone()
env1.Append(CPPDEFINES=[('USE_POCO_LIB', 1)])
build.add_thirdparty(env1, 'poco')

if build.is_win32():
    env1.Append(LIBS=[
        'Advapi32', 'comctl32', 'kernel32',
        'ole32', 'oleaut32', 'iphlpapi',
        'shell32', 'shlwapi', 'user32',
        'winhttp'])

sources1 = get_tide_utils(path.join(build.dir, 'objs', 'libtideutils'))
build.mark_build_target(env1.SharedLibrary(path.join(build.dir, 'runtime', libutils_name), source=sources1))

# copy the includes for building the SDK
tide_utils_include = path.join(build.tide_include_dir, libutils_name)
effess.copy_tree(build.cwd(), tide_utils_include, include=['.h'])
