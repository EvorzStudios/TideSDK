#!/usr/bin/env python

# 
# Copyright (c) 2012 - 2014 TideSDK contributors 
# http://www.tidesdk.org
# Includes modified sources under the Apache 2 License
# Copyright (c) 2008 - 2012 Appcelerator Inc
# Refer to LICENSE for details of distribution and use.
# 

import os, os.path as path
Import('build')
Import('LIBTIDE_NAME')
Import('LIBUTILS_NAME')

libtide_name = 'lib' + LIBTIDE_NAME
Env = build.env.Clone()
Env.Append(CPPDEFINES=['USE_NO_EXPORT=1', 'NO_UNZIP=1'])
Env.Append(LIBS=[LIBUTILS_NAME])
Env.Append(LIBPATH=[path.join(build.dir, 'objs')])
# We add libtide to the CPPPATH, so that we can use things
# like "base.h" in this build.
Env.Append(CPPPATH=[path.join(build.tide_source_dir, libtide_name)])

sources = ['boot.cpp']

if build.is_osx():
    sources += Glob('*_osx.mm')
    Env.Append(LIBS=['dl'])
    Env.Append(FRAMEWORKS=['Cocoa','IOKit'])

if build.is_linux():
    sources += Glob('*_linux.cpp')
    Env.Append(LIBS=['dl'])
    Env.ParseConfig('pkg-config --cflags --libs gtk+-2.0 gdk-2.0')

if build.is_win32():
    sources += Glob('*_win32.cpp') + [Env.RES('support/winboot.rc')]
    
    Env.Append(LIBS=['kernel32','shell32','user32','advapi32','iphlpapi','gdi32'])
    Env.Append(LINKFLAGS=['/NODEFAULTLIB:MSJAVA.lib'])
    ccf = Env['CCFLAGS']
    if '/Z7' in ccf: ccf.remove('/Z7')
    ccf += ['/O2','/GL','/FD','/EHsc','/W3','/Wp64','/Zi','/TP','/DUNICODE']
    Env['CCFLAGS'] = ccf

    # Generate a manifest which will later be merged with the common controls manifest
    intermediate_manifest = path.join(build.dir, 'boot.exe.intermediate.manifest')
    linkflags = ['/MANIFEST', '/MANIFESTFILE:%s' % intermediate_manifest]

    linkflags += ['/OPT:REF','/OPT:ICF','/LTCG','/MACHINE:X86']
    if ARGUMENTS.get('debug', 0) or ARGUMENTS.get('console',0):
        linkflags.append('/SUBSYSTEM:CONSOLE'),
        Env.Append(CPPDEFINES=['WIN32_CONSOLE=1', 'UNICODE=1'])
    Env.Append(LINKFLAGS=linkflags)

build.add_thirdparty(Env, 'boost_include')

tiboot_out = path.join(build.dir, 'sdk', 'tiboot')
p = Env.Program(tiboot_out, sources)
build.mark_build_target(p)

# Merge tiboot's manifest with the common controls manifest, so that
# it can use XP-style common controls -- and still have the correct
# references to MSVCRT8. Also include Webkit.tlb in the manifest and
# have it reference the path "WebKit.dll". This is for XP systems which
# will need to bootstrap by running runtimedir/tiboot.exe during the 
# boot process.
if build.is_win32():
    t = build.utils.CopyToDir(p[0], path.join(build.dir, 'runtime'))
    build.mark_build_target(t)

    cc_manifest = path.join(build.cwd(), 'support', 'common_controls.manifest')
    merged_manifest = path.join(build.dir, 'tiboot.merged.manifest')
    Env.AddPostAction(p, 'mt.exe -nologo -manifest "%s" "%s" -out:"%s"' % (intermediate_manifest, cc_manifest, merged_manifest))
    Env.AddPostAction(p, ('mt.exe -nologo /outputresource:"%s.exe;#1" /manifest "%s"' % (tiboot_out, merged_manifest)))
